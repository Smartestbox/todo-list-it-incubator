[{"/Users/igorolkhov/Desktop/projects/it-incubator/todo-list-it-incubator/src/index.tsx":"1","/Users/igorolkhov/Desktop/projects/it-incubator/todo-list-it-incubator/src/App.tsx":"2","/Users/igorolkhov/Desktop/projects/it-incubator/todo-list-it-incubator/src/TodoList.tsx":"3","/Users/igorolkhov/Desktop/projects/it-incubator/todo-list-it-incubator/src/AddItemForm.tsx":"4","/Users/igorolkhov/Desktop/projects/it-incubator/todo-list-it-incubator/src/EtitableSpan.tsx":"5"},{"size":445,"mtime":1673281928452,"results":"6","hashOfConfig":"7"},{"size":4290,"mtime":1675795032882,"results":"8","hashOfConfig":"7"},{"size":3448,"mtime":1675795032885,"results":"9","hashOfConfig":"7"},{"size":1345,"mtime":1675785080842,"results":"10","hashOfConfig":"7"},{"size":815,"mtime":1675793219762,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"uikfy8",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/igorolkhov/Desktop/projects/it-incubator/todo-list-it-incubator/src/index.tsx",[],[],[],"/Users/igorolkhov/Desktop/projects/it-incubator/todo-list-it-incubator/src/App.tsx",[],[],"/Users/igorolkhov/Desktop/projects/it-incubator/todo-list-it-incubator/src/TodoList.tsx",["30","31"],[],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport {FilterValuesType} from \"./App\";\nimport './App.css';\nimport AddItemForm from \"./AddItemForm\";\nimport EtitableSpan from \"./EtitableSpan\";\n\ntype TodoListPropsType = {\n    todoListId: string\n    title: string\n    filter: FilterValuesType\n    tasks: Array<TaskType>\n    removeTask: (taskId: string, todoListId: string) => void\n    changeTodoListFilter: (filter: any, todoListId: string) => void\n    changeTodoListTitle: (title: string, todoListId: string) => void\n    addTask: (title: string, todoListId: string) => void\n    changeTaskStatus: (taskId: string, isDone: boolean, todoListId: string) => void\n    changeTaskTitle: (taskId: string, title: string, todoListId: string) => void\n    removeTodoList: (todoList: string, todoListId: string) => void\n}\n\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\nconst TodoList = (props: TodoListPropsType) => {\n    let tasksList = props.tasks.length\n        ? props.tasks.map((task: TaskType, index) => {\n            const changeTaskTitle = (title: string) => props.changeTaskTitle(task.id, title, props.todoListId)\n            const removeTask = () => props.removeTask(task.id, props.todoListId)\n            const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(task.id, e.currentTarget.checked, props.todoListId)\n            const taskClass = task.isDone ? 'task-done' : ''\n            return (\n                <li key={index} className={taskClass}>\n                    <input onChange={changeTaskStatus} type=\"checkbox\" checked={task.isDone}/>\n                    <EtitableSpan  title={task.title} changeTitle={changeTaskTitle}/>\n                    <button onClick={removeTask}>x</button>\n                </li>\n            )\n        })\n        : <span>Your taskslist is empty</span>\n\n    const addTask = (title: string) => {\n        props.addTask(title, props.todoListId)\n    }\n    const changeTodoListTitle = (title: string) => props.changeTodoListTitle(title, props.todoListId)\n    const onClickAllHandler = () => props.changeTodoListFilter('all', props.todoListId)\n    const onClickActiveHandler = () => props.changeTodoListFilter('active', props.todoListId)\n    const onClickCompletedHandler = () => props.changeTodoListFilter('completed', props.todoListId)\n    const removeTodoList = () => props.removeTodoList(props.todoListId, props.todoListId)\n\n    return (\n        <div>\n            <h3>\n                <EtitableSpan title={props.title} changeTitle={changeTodoListTitle} />\n                <button onClick={removeTodoList}>x</button>\n            </h3>\n            <AddItemForm addItem={addTask}/>\n            <ul>\n                {tasksList}\n            </ul>\n            <div>\n                <button\n                    className={props.filter === 'all' ? 'btn-active' : ''} onClick={onClickAllHandler}\n                >\n                    All\n                </button>\n                <button\n                    className={props.filter === 'active' ? 'btn-active' : ''} onClick={onClickActiveHandler}\n                >\n                    Active\n                </button>\n                <button\n                    className={props.filter === 'completed' ? 'btn-active' : ''} onClick={onClickCompletedHandler}\n                >\n                    Completed\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default TodoList;","/Users/igorolkhov/Desktop/projects/it-incubator/todo-list-it-incubator/src/AddItemForm.tsx",[],[],[],"/Users/igorolkhov/Desktop/projects/it-incubator/todo-list-it-incubator/src/EtitableSpan.tsx",[],[],{"ruleId":"32","severity":1,"message":"33","line":1,"column":29,"nodeType":"34","messageId":"35","endLine":1,"endColumn":42},{"ruleId":"32","severity":1,"message":"36","line":1,"column":44,"nodeType":"34","messageId":"35","endLine":1,"endColumn":52},"@typescript-eslint/no-unused-vars","'KeyboardEvent' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used."]